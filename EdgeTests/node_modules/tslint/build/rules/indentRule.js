var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.isEnabled = function () {
        return false;
    };

    Rule.prototype.apply = function (syntaxTree) {
        return this.applyWithWalker(new IndentWalker(syntaxTree, this.getOptions()));
    };
    Rule.FAILURE_STRING = "unexpected tab width: ";
    return Rule;
})(Lint.Rules.AbstractRule);
exports.Rule = Rule;

var IndentWalker = (function (_super) {
    __extends(IndentWalker, _super);
    function IndentWalker(syntaxTree, options) {
        _super.call(this, syntaxTree, options);
        this.currentLevel = 0;
        this.tabWidth = this.getOptions()[0];
    }
    IndentWalker.prototype.visitClassDeclaration = function (node) {
        this.currentLevel += 1;
        _super.prototype.visitClassDeclaration.call(this, node);
        this.currentLevel -= 1;
    };

    IndentWalker.prototype.visitMemberVariableDeclaration = function (node) {
        var firstElement;
        if (node.modifiers.childCount() > 0) {
            firstElement = node.modifiers.childAt(0);
        } else {
            firstElement = node.variableDeclarator;
        }

        this.checkNodeOrToken(firstElement);
        _super.prototype.visitMemberVariableDeclaration.call(this, node);
    };

    IndentWalker.prototype.visitMemberFunctionDeclaration = function (node) {
        var firstElement;
        if (node.modifiers.childCount() > 0) {
            firstElement = node.modifiers.childAt(0);
        } else {
            firstElement = node.propertyName;
        }

        this.checkNodeOrToken(firstElement);
        _super.prototype.visitMemberFunctionDeclaration.call(this, node);
    };

    IndentWalker.prototype.visitModuleDeclaration = function (node) {
        this.visitList(node.modifiers);
        this.visitToken(node.moduleKeyword);
        this.visitOptionalNodeOrToken(node.name);
        if (node.stringLiteral !== null) {
            this.visitToken(node.stringLiteral);
        }
        this.visitToken(node.openBraceToken);
        this.checkAndVisitList(node.moduleElements);
        this.visitToken(node.closeBraceToken);
    };

    IndentWalker.prototype.visitEnumDeclaration = function (node) {
        this.visitList(node.modifiers);
        this.visitToken(node.enumKeyword);
        this.visitToken(node.identifier);
        this.visitToken(node.openBraceToken);
        this.checkAndVisitSeparatedList(node.enumElements);
        this.visitToken(node.closeBraceToken);
    };

    IndentWalker.prototype.visitSwitchStatement = function (node) {
        this.currentLevel += 1;
        _super.prototype.visitSwitchStatement.call(this, node);
        this.currentLevel -= 1;
    };

    IndentWalker.prototype.visitCaseSwitchClause = function (node) {
        this.checkAndVisitNodeOrToken(node.caseKeyword);
        this.visitNodeOrToken(node.expression);
        this.visitToken(node.colonToken);
        this.checkAndVisitList(node.statements);
    };

    IndentWalker.prototype.visitDefaultSwitchClause = function (node) {
        this.checkAndVisitNodeOrToken(node.defaultKeyword);
        this.visitToken(node.colonToken);
        this.checkAndVisitList(node.statements);
    };

    IndentWalker.prototype.checkAndVisitList = function (list) {
        this.currentLevel += 1;
        for (var i = 0; i < list.childCount(); i++) {
            this.checkAndVisitNodeOrToken(list.childAt(i));
        }
        this.currentLevel -= 1;
    };

    IndentWalker.prototype.checkAndVisitSeparatedList = function (list) {
        this.currentLevel += 1;
        for (var i = 0, n = list.childCount(); i < n; i++) {
            var element = list.childAt(i);

            if (element.kind() === 79 /* CommaToken */ || element.kind() === 78 /* SemicolonToken */) {
                this.visitNodeOrToken(element);
            } else {
                this.checkAndVisitNodeOrToken(element);
            }
        }
        this.currentLevel -= 1;
    };

    IndentWalker.prototype.checkAndVisitNodeOrToken = function (nodeOrToken) {
        this.checkNodeOrToken(nodeOrToken);
        this.visitNodeOrToken(nodeOrToken);
    };

    IndentWalker.prototype.checkNodeOrToken = function (nodeOrToken) {
        var expectedIndentation = this.currentLevel * this.tabWidth;
        var actualIndentation = this.getImmediateIndentation(nodeOrToken);

        if (expectedIndentation !== actualIndentation) {
            var position = this.position() + nodeOrToken.leadingTriviaWidth();
            var error = Rule.FAILURE_STRING + "expected " + expectedIndentation + ", " + "got " + actualIndentation;

            this.addFailure(this.createFailure(position, nodeOrToken.width(), error));
        }
    };

    IndentWalker.prototype.getImmediateIndentation = function (element) {
        var indentationCount = 0;
        var triviaList = element.leadingTrivia();

        var listCount = triviaList.count();
        if (listCount > 0) {
            var trivia = triviaList.syntaxTriviaAt(listCount - 1);
            if (trivia.kind() === 4 /* WhitespaceTrivia */) {
                indentationCount = this.getWhitespaceWidth(trivia.fullText());
            }
        }

        return indentationCount;
    };

    IndentWalker.prototype.getWhitespaceWidth = function (whitespace) {
        var width = 0;
        for (var i = 0; i < whitespace.length; ++i) {
            var charCode = whitespace.charCodeAt(i);
            if (charCode === 9 /* tab */) {
                width += 4;
            } else {
                width += 1;
            }
        }

        return width;
    };
    return IndentWalker;
})(Lint.RuleWalker);
