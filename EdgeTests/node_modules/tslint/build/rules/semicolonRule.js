var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.apply = function (syntaxTree) {
        var ruleFailures = [];
        var diagnostics = syntaxTree.diagnostics();

        var disabledIntervals = this.getOptions().disabledIntervals;

        for (var i = 0; i < diagnostics.length; ++i) {
            var diagnostic = diagnostics[i];
            var diagnosticKey = diagnostic.diagnosticKey();

            if (diagnosticKey === TypeScript.DiagnosticCode.Automatic_semicolon_insertion_not_allowed) {
                var position = diagnostic.start();
                var ruleFailure = new Lint.RuleFailure(syntaxTree, position, position, Rule.FAILURE_STRING, this.getOptions().ruleName);
                if (!Lint.doesIntersect(ruleFailure, disabledIntervals)) {
                    ruleFailures.push(ruleFailure);
                }
            }
        }

        return ruleFailures;
    };
    Rule.FAILURE_STRING = "missing semicolon";
    return Rule;
})(Lint.Rules.AbstractRule);
exports.Rule = Rule;
