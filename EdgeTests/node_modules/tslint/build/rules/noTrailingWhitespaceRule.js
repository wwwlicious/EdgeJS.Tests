var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.apply = function (syntaxTree) {
        return this.applyWithWalker(new NoTrailingWhitespaceWalker(syntaxTree, this.getOptions()));
    };
    Rule.FAILURE_STRING = "trailing whitespace";
    return Rule;
})(Lint.Rules.AbstractRule);
exports.Rule = Rule;

var NoTrailingWhitespaceWalker = (function (_super) {
    __extends(NoTrailingWhitespaceWalker, _super);
    function NoTrailingWhitespaceWalker() {
        _super.apply(this, arguments);
    }
    NoTrailingWhitespaceWalker.prototype.visitToken = function (token) {
        _super.prototype.visitToken.call(this, token);
        this.checkForTrailingWhitespace(token.trailingTrivia());
    };

    NoTrailingWhitespaceWalker.prototype.visitNode = function (node) {
        _super.prototype.visitNode.call(this, node);
        this.checkForTrailingWhitespace(node.trailingTrivia());
    };

    NoTrailingWhitespaceWalker.prototype.checkForTrailingWhitespace = function (triviaList) {
        if (triviaList.count() < 2) {
            return;
        }

        var lastButOne = triviaList.count() - 2;
        var trivia = triviaList.syntaxTriviaAt(lastButOne);
        var triviaKind = trivia.kind();
        if (triviaList.hasNewLine() && triviaKind === 4 /* WhitespaceTrivia */) {
            var start = this.position() - trivia.fullWidth() - 1;
            var failure = this.createFailure(start, trivia.fullWidth(), Rule.FAILURE_STRING);
            this.addFailure(failure);
        }
    };
    return NoTrailingWhitespaceWalker;
})(Lint.RuleWalker);
