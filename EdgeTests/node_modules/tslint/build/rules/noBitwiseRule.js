var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.apply = function (syntaxTree) {
        return this.applyWithWalker(new NoBitwiseWalker(syntaxTree, this.getOptions()));
    };
    Rule.FAILURE_STRING = "forbidden bitwise operation";
    return Rule;
})(Lint.Rules.AbstractRule);
exports.Rule = Rule;

var NoBitwiseWalker = (function (_super) {
    __extends(NoBitwiseWalker, _super);
    function NoBitwiseWalker() {
        _super.apply(this, arguments);
    }
    NoBitwiseWalker.prototype.visitNode = function (node) {
        if (node.kind() === 191 /* BitwiseAndExpression */ || node.kind() === 180 /* AndAssignmentExpression */ || node.kind() === 189 /* BitwiseOrExpression */ || node.kind() === 182 /* OrAssignmentExpression */ || node.kind() === 190 /* BitwiseExclusiveOrExpression */ || node.kind() === 181 /* ExclusiveOrAssignmentExpression */ || node.kind() === 202 /* LeftShiftExpression */ || node.kind() === 183 /* LeftShiftAssignmentExpression */ || node.kind() === 203 /* SignedRightShiftExpression */ || node.kind() === 184 /* SignedRightShiftAssignmentExpression */ || node.kind() === 204 /* UnsignedRightShiftExpression */ || node.kind() === 185 /* UnsignedRightShiftAssignmentExpression */ || node.kind() === 166 /* BitwiseNotExpression */) {
            this.addFailure(this.createFailure(this.position() + node.leadingTriviaWidth(), node.width(), Rule.FAILURE_STRING));
        }

        _super.prototype.visitNode.call(this, node);
    };
    return NoBitwiseWalker;
})(Lint.RuleWalker);
